var $8zHUo$dailycodailyjs = require("@daily-co/daily-js");
var $8zHUo$realtimeai = require("realtime-ai");


function $parcel$exportWildcard(dest, source) {
  Object.keys(source).forEach(function(key) {
    if (key === 'default' || key === '__esModule' || Object.prototype.hasOwnProperty.call(dest, key)) {
      return;
    }

    Object.defineProperty(dest, key, {
      enumerable: true,
      get: function get() {
        return source[key];
      }
    });
  });

  return dest;
}

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
var $bbd4e85ccc0fdffc$exports = {};

$parcel$export($bbd4e85ccc0fdffc$exports, "DailyTransport", () => $bbd4e85ccc0fdffc$export$b1ca982aa1e488c1);


class $bbd4e85ccc0fdffc$export$b1ca982aa1e488c1 extends (0, $8zHUo$realtimeai.Transport) {
    constructor(){
        super();
        this._botId = "";
        this._selectedCam = {};
        this._selectedMic = {};
    }
    initialize(options, messageHandler) {
        this._callbacks = options.callbacks ?? {};
        this._onMessage = messageHandler;
        const existingInstance = (0, ($parcel$interopDefault($8zHUo$dailycodailyjs))).getCallInstance();
        if (existingInstance) existingInstance.destroy();
        this._daily = (0, ($parcel$interopDefault($8zHUo$dailycodailyjs))).createCallObject({
            startVideoOff: !(options.enableCam == true),
            startAudioOff: options.enableMic == false,
            allowMultipleCallInstances: true,
            dailyConfig: {}
        });
        this.attachEventListeners();
        this.state = "disconnected";
        console.debug("[RTVI Transport] Initialized");
    }
    get state() {
        return this._state;
    }
    set state(state) {
        if (this._state === state) return;
        this._state = state;
        this._callbacks.onTransportStateChanged?.(state);
    }
    async getAllCams() {
        const { devices: devices } = await this._daily.enumerateDevices();
        return devices.filter((d)=>d.kind === "videoinput");
    }
    updateCam(camId) {
        this._daily.setInputDevicesAsync({
            videoDeviceId: camId
        }).then((infos)=>{
            this._selectedCam = infos.camera;
        });
    }
    get selectedCam() {
        return this._selectedCam;
    }
    async getAllMics() {
        const { devices: devices } = await this._daily.enumerateDevices();
        return devices.filter((d)=>d.kind === "audioinput");
    }
    updateMic(micId) {
        this._daily.setInputDevicesAsync({
            audioDeviceId: micId
        }).then((infos)=>{
            this._selectedMic = infos.mic;
        });
    }
    get selectedMic() {
        return this._selectedMic;
    }
    enableMic(enable) {
        this._daily.setLocalAudio(enable);
    }
    get isMicEnabled() {
        return this._daily.localAudio();
    }
    enableCam(enable) {
        this._daily.setLocalVideo(enable);
    }
    get isCamEnabled() {
        return this._daily.localVideo();
    }
    tracks() {
        const participants = this._daily?.participants() ?? {};
        const bot = participants?.[this._botId];
        const tracks = {
            local: {
                audio: participants?.local?.tracks?.audio?.persistentTrack,
                video: participants?.local?.tracks?.video?.persistentTrack
            }
        };
        if (bot) tracks.bot = {
            audio: bot?.tracks?.audio?.persistentTrack,
            video: bot?.tracks?.video?.persistentTrack
        };
        return tracks;
    }
    async initDevices() {
        if (!this._daily) throw new (0, $8zHUo$realtimeai.RTVIError)("Transport instance not initialized");
        this.state = "initializing";
        const infos = await this._daily.startCamera();
        const { devices: devices } = await this._daily.enumerateDevices();
        const cams = devices.filter((d)=>d.kind === "videoinput");
        const mics = devices.filter((d)=>d.kind === "audioinput");
        this._callbacks.onAvailableCamsUpdated?.(cams);
        this._callbacks.onAvailableMicsUpdated?.(mics);
        this._selectedCam = infos.camera;
        this._callbacks.onCamUpdated?.(infos.camera);
        this._selectedMic = infos.mic;
        this._callbacks.onMicUpdated?.(infos.mic);
        // Instantiate audio observers
        if (!this._daily.isLocalAudioLevelObserverRunning()) await this._daily.startLocalAudioLevelObserver(100);
        if (!this._daily.isRemoteParticipantsAudioLevelObserverRunning()) await this._daily.startRemoteParticipantsAudioLevelObserver(100);
        this.state = "initialized";
    }
    async connect(authBundle, abortController) {
        if (!this._daily) throw new (0, $8zHUo$realtimeai.RTVIError)("Transport instance not initialized");
        if (abortController.signal.aborted) return;
        this.state = "connecting";
        try {
            await this._daily.join({
                url: authBundle.room_url,
                token: authBundle.token
            });
            const room = await this._daily.room();
            if (room && "id" in room) this._expiry = room.config?.exp;
        } catch (e) {
            this.state = "error";
            throw new (0, $8zHUo$realtimeai.TransportStartError)();
        }
        if (abortController.signal.aborted) return;
        this.state = "connected";
        this._callbacks.onConnected?.();
    }
    async sendReadyMessage() {
        return new Promise((resolve)=>{
            (async ()=>{
                this._daily.on("track-started", (ev)=>{
                    if (!ev.participant?.local) {
                        this.state = "ready";
                        this.sendMessage((0, $8zHUo$realtimeai.RTVIMessage).clientReady());
                        resolve();
                    }
                });
            })();
        });
    }
    attachEventListeners() {
        this._daily.on("available-devices-updated", this.handleAvailableDevicesUpdated.bind(this));
        this._daily.on("selected-devices-updated", this.handleSelectedDevicesUpdated.bind(this));
        this._daily.on("track-started", this.handleTrackStarted.bind(this));
        this._daily.on("track-stopped", this.handleTrackStopped.bind(this));
        this._daily.on("participant-joined", this.handleParticipantJoined.bind(this));
        this._daily.on("participant-left", this.handleParticipantLeft.bind(this));
        this._daily.on("local-audio-level", this.handleLocalAudioLevel.bind(this));
        this._daily.on("remote-participants-audio-level", this.handleRemoteAudioLevel.bind(this));
        this._daily.on("app-message", this.handleAppMessage.bind(this));
        this._daily.on("left-meeting", this.handleLeftMeeting.bind(this));
    }
    async disconnect() {
        this._daily.stopLocalAudioLevelObserver();
        this._daily.stopRemoteParticipantsAudioLevelObserver();
        await this._daily.leave();
        await this._daily.destroy();
    }
    sendMessage(message) {
        this._daily.sendAppMessage(message, "*");
    }
    handleAppMessage(ev) {
        // Bubble any messages with rtvi-ai label
        if (ev.data.label === "rtvi-ai") this._onMessage({
            id: ev.data.id,
            type: ev.data.type,
            data: ev.data.data
        });
    }
    handleAvailableDevicesUpdated(ev) {
        this._callbacks.onAvailableCamsUpdated?.(ev.availableDevices.filter((d)=>d.kind === "videoinput"));
        this._callbacks.onAvailableMicsUpdated?.(ev.availableDevices.filter((d)=>d.kind === "audioinput"));
    }
    handleSelectedDevicesUpdated(ev) {
        if (this._selectedCam?.deviceId !== ev.devices.camera) {
            this._selectedCam = ev.devices.camera;
            this._callbacks.onCamUpdated?.(ev.devices.camera);
        }
        if (this._selectedMic?.deviceId !== ev.devices.mic) {
            this._selectedMic = ev.devices.mic;
            this._callbacks.onMicUpdated?.(ev.devices.mic);
        }
    }
    handleTrackStarted(ev) {
        this._callbacks.onTrackStarted?.(ev.track, ev.participant ? $bbd4e85ccc0fdffc$var$dailyParticipantToParticipant(ev.participant) : undefined);
    }
    handleTrackStopped(ev) {
        this._callbacks.onTrackStopped?.(ev.track, ev.participant ? $bbd4e85ccc0fdffc$var$dailyParticipantToParticipant(ev.participant) : undefined);
    }
    handleParticipantJoined(ev) {
        const p = $bbd4e85ccc0fdffc$var$dailyParticipantToParticipant(ev.participant);
        this._callbacks.onParticipantJoined?.(p);
        if (p.local) return;
        this._botId = ev.participant.session_id;
        this._callbacks.onBotConnected?.(p);
    }
    handleParticipantLeft(ev) {
        const p = $bbd4e85ccc0fdffc$var$dailyParticipantToParticipant(ev.participant);
        this._callbacks.onParticipantLeft?.(p);
        if (p.local) return;
        this._botId = "";
        this._callbacks.onBotDisconnected?.(p);
    }
    handleLocalAudioLevel(ev) {
        this._callbacks.onLocalAudioLevel?.(ev.audioLevel);
    }
    handleRemoteAudioLevel(ev) {
        const participants = this._daily.participants();
        const ids = Object.keys(ev.participantsAudioLevel);
        for(let i = 0; i < ids.length; i++){
            const id = ids[i];
            const level = ev.participantsAudioLevel[id];
            this._callbacks.onRemoteAudioLevel?.(level, $bbd4e85ccc0fdffc$var$dailyParticipantToParticipant(participants[id]));
        }
    }
    handleLeftMeeting() {
        this.state = "disconnecting";
        this._botId = "";
        this._callbacks.onDisconnected?.();
    }
}
const $bbd4e85ccc0fdffc$var$dailyParticipantToParticipant = (p)=>({
        id: p.user_id,
        local: p.local,
        name: p.user_name
    });


$parcel$exportWildcard(module.exports, $bbd4e85ccc0fdffc$exports);


//# sourceMappingURL=index.js.map
