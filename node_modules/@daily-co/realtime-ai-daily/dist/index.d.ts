import { Tracks, Transport, TransportState, RTVIClientOptions, RTVIMessage } from "realtime-ai";
export interface DailyTransportAuthBundle {
    room_url: string;
    token: string;
}
export class DailyTransport extends Transport {
    constructor();
    initialize(options: RTVIClientOptions, messageHandler: (ev: RTVIMessage) => void): void;
    get state(): TransportState;
    private set state(value);
    getAllCams(): Promise<import("@daily-co/daily-js").DailyMediaDeviceInfo[]>;
    updateCam(camId: string): void;
    get selectedCam(): MediaDeviceInfo | Record<string, never>;
    getAllMics(): Promise<import("@daily-co/daily-js").DailyMediaDeviceInfo[]>;
    updateMic(micId: string): void;
    get selectedMic(): MediaDeviceInfo | Record<string, never>;
    enableMic(enable: boolean): void;
    get isMicEnabled(): boolean;
    enableCam(enable: boolean): void;
    get isCamEnabled(): boolean;
    tracks(): Tracks;
    initDevices(): Promise<void>;
    connect(authBundle: DailyTransportAuthBundle, abortController: AbortController): Promise<void>;
    sendReadyMessage(): Promise<void>;
    disconnect(): Promise<void>;
    sendMessage(message: RTVIMessage): void;
}

//# sourceMappingURL=index.d.ts.map
